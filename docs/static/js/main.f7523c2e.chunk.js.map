{"version":3,"sources":["components/Forlumario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","dueño","fecha","hora","sintomas","cita","setCita","error","setError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","slice","type","placeholder","onChange","htmlFor","Cita","eliminarCita","onClick","App","citasInciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAgHeA,EA5GI,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAEpB,EAAwBC,mBAAS,CAC/BC,QAAS,GACTC,WAAO,GACPC,MAAO,GACPC,KAAM,GACNC,SAAU,KALZ,mBAAOC,EAAP,KAAaC,EAAb,KAQA,EAA0BP,oBAAS,GAAnC,mBAAOQ,EAAP,KAAcC,EAAd,KAGMC,EAAe,SAACC,GACpBJ,EAAQ,2BACHD,GADE,kBAEJK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAKtBb,EAA0CK,EAA1CL,QAASC,EAAiCI,EAAjCJ,WAAOC,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,KAAMC,EAAaC,EAAbD,SA2BrC,OACE,eAAC,WAAD,WACE,4CACCG,EACC,mBAAGO,UAAU,eAAb,+CACE,KACJ,uBAAMC,SA/BS,SAACL,GAClBA,EAAEM,iBAGmB,KAAnBhB,EAAQiB,QACS,KAAjBhB,EAAMgB,QACW,KAAjBf,EAAMe,QACU,KAAhBd,EAAKc,QACe,KAApBb,EAASa,QAKXT,GAAS,GACTH,EAAKa,GAAKC,cAASC,MAAM,IACzBtB,EAAUO,GACVC,EAAQ,CACNN,QAAS,GACTC,WAAO,GACPC,MAAO,GACPC,KAAM,GACNC,SAAU,MAXVI,GAAS,IAqBT,UACE,oDACA,uBACEa,KAAK,OACLT,KAAK,UACLE,UAAU,eACVQ,YAAY,iBACZC,SAAUd,EACVI,MAAOb,IAET,oDACA,uBACEqB,KAAK,OACLT,KAAK,WACLE,UAAU,eACVQ,YAAY,kBACZC,SAAUd,EACVI,MAAOZ,IAET,0CACA,uBACEoB,KAAK,OACLT,KAAK,QACLE,UAAU,eACVS,SAAUd,EACVI,MAAOX,IAET,yCACA,uBACEmB,KAAK,OACLT,KAAK,OACLE,UAAU,eACVS,SAAUd,EACVI,MAAOV,IAET,uBAAOqB,QAAQ,GAAf,sBACA,0BACEV,UAAU,eACVF,KAAK,WACLW,SAAUd,EACVI,MAAOT,IAET,wBAAQiB,KAAK,SAASP,UAAU,8BAAhC,4BChEOW,EAjCF,SAAC,GAA4B,IAA1BpB,EAAyB,EAAzBA,KAAMqB,EAAmB,EAAnBA,aACpB,OACE,sBAAKZ,UAAU,OAAf,UACE,0CACW,+BAAOT,EAAKL,aAEvB,2CACS,+BAAOK,EAAKJ,gBAErB,wCACS,+BAAOI,EAAKH,WAErB,uCACQ,+BAAOG,EAAKF,UAEpB,0CACW,+BAAOE,EAAKD,cAEvB,wBACEU,UAAU,+BACVa,QAAS,kBAAMD,EAAarB,EAAKa,KAFnC,0BCmCSU,MArDf,WAEE,IAAIC,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,UAC/CJ,IACHA,EAAgB,IAIlB,MAA0B9B,mBAAS8B,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAQAC,qBAAU,WACJP,EACFG,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,IAE7CF,aAAaK,QAAQ,QAASP,KAAKQ,UAAU,OAE9C,CAACJ,EAAOL,IAIX,IAAMH,EAAe,SAACR,GACpB,IAAMqB,EAAcL,EAAMM,QAAO,SAACnC,GAAD,OAAUA,EAAKa,KAAOA,KACvDiB,EAASI,IAGLE,EAA0B,IAAjBP,EAAMQ,OAAe,eAAiB,uBAErD,OACE,eAAC,WAAD,WACE,4DACA,qBAAK5B,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,EAAD,CAAYhB,UA3BJ,SAACO,GACjB8B,EAAS,GAAD,mBAAKD,GAAL,CAAY7B,UA4Bd,sBAAKS,UAAU,kBAAf,UACE,6BAAK2B,IACJP,EAAMS,KAAI,SAACtC,GAAD,OACT,cAAC,EAAD,CAAoBA,KAAMA,EAAMqB,aAAcA,GAAnCrB,EAAKa,mBCnCf0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f7523c2e.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PropTypes from \"prop-types\";\n\nconst Formulario = ({ crearCita }) => {\n  //Crear State de citas\n  const [cita, setCita] = useState({\n    mascota: \"\",\n    dueño: \"\",\n    fecha: \"\",\n    hora: \"\",\n    sintomas: \"\",\n  });\n\n  const [error, setError] = useState(false);\n  //Funcion que se ejecuta cuando se escribe en un input\n\n  const handleChange = (e) => {\n    setCita({\n      ...cita,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  //Extraer los valores\n  const { mascota, dueño, fecha, hora, sintomas } = cita;\n\n  const submitCita = (e) => {\n    e.preventDefault();\n\n    if (\n      mascota.trim() === \"\" ||\n      dueño.trim() === \"\" ||\n      fecha.trim() === \"\" ||\n      hora.trim() === \"\" ||\n      sintomas.trim() === \"\"\n    ) {\n      setError(true);\n      return;\n    }\n    setError(false);\n    cita.id = uuidv4().slice(30);\n    crearCita(cita);\n    setCita({\n      mascota: \"\",\n      dueño: \"\",\n      fecha: \"\",\n      hora: \"\",\n      sintomas: \"\",\n    });\n  };\n\n  return (\n    <Fragment>\n      <h2>Crear Cita</h2>\n      {error ? (\n        <p className=\"alerta-error\"> Todos los campos son obligatoris</p>\n      ) : null}\n      <form onSubmit={submitCita}>\n        <label>Nombre Mascotas</label>\n        <input\n          type=\"text\"\n          name=\"mascota\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Mascota\"\n          onChange={handleChange}\n          value={mascota}\n        />\n        <label>Nombre Dueño</label>\n        <input\n          type=\"text\"\n          name=\"dueño\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Dueño\"\n          onChange={handleChange}\n          value={dueño}\n        />\n        <label>Fecha</label>\n        <input\n          type=\"date\"\n          name=\"fecha\"\n          className=\"u-full-width\"\n          onChange={handleChange}\n          value={fecha}\n        />\n        <label>Hora</label>\n        <input\n          type=\"time\"\n          name=\"hora\"\n          className=\"u-full-width\"\n          onChange={handleChange}\n          value={hora}\n        />\n        <label htmlFor=\"\">Sintomas</label>\n        <textarea\n          className=\"u-full-width\"\n          name=\"sintomas\"\n          onChange={handleChange}\n          value={sintomas}\n        ></textarea>\n        <button type=\"submit\" className=\"u-full-width button-primary\">\n          Agregar\n        </button>\n      </form>\n    </Fragment>\n  );\n};\n\nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired,\n};\n\nexport default Formulario;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Cita = ({ cita, eliminarCita }) => {\n  return (\n    <div className=\"cita\">\n      <p>\n        Mascota: <span>{cita.mascota}</span>\n      </p>\n      <p>\n        Dueño: <span>{cita.dueño}</span>\n      </p>\n      <p>\n        Fecha: <span>{cita.fecha}</span>\n      </p>\n      <p>\n        Hora: <span>{cita.hora}</span>\n      </p>\n      <p>\n        Sintoma: <span>{cita.sintomas}</span>\n      </p>\n      <button\n        className=\"button eliminar u-full-width\"\n        onClick={() => eliminarCita(cita.id)}\n      >\n        Eliminar\n      </button>\n    </div>\n  );\n};\n\nCita.propTypes = {\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired,\n};\n\nexport default Cita;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Forlumario\";\nimport Cita from \"./components/Cita\";\nfunction App() {\n  //Citas en localStorage\n  let citasInciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if (!citasInciales) {\n    citasInciales = [];\n  }\n\n  //Arreglo de todas las citas\n  const [citas, setCitas] = useState(citasInciales);\n\n  //Funciones que modifique las citas\n\n  const crearCita = (cita) => {\n    setCitas([...citas, cita]);\n  };\n\n  useEffect(() => {\n    if (citasInciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas, citasInciales]);\n\n  //Funcion que elimina una cita por su id\n\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter((cita) => cita.id !== id);\n    setCitas(nuevasCitas);\n  };\n\n  const titulo = citas.length === 0 ? \"No hay Citas\" : \"Administra tus Citas\";\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}